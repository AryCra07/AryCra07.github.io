<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>谈北邮计语工作改进</title>
    <url>/2023/07/05/%E8%B0%88%E5%8C%97%E9%82%AE%E8%AE%A1%E8%AF%AD%E5%B7%A5%E4%BD%9C%E6%94%B9%E8%BF%9B/</url>
    <content><![CDATA[<p>在北邮计语融媒体中心平台运营部工作了两年，一年当部员一年当副部。这两年里，我接手了从推送制作到公众号运营几乎所有类型的任务，经历亦或是经验不能算不丰富。只是临别回想工作得失，不免诸多遗憾，在此一表。</p>
<span id="more"></span>
<h1 id="北邮计语平台运营部是什么">北邮计语平台运营部是什么？</h1>
<p>北邮计语公众号本质上是北邮计院的官方媒体，由北邮计语融媒体中心平台运营部负责推送的制作、发布与日常运营。</p>
<ul>
<li>官方媒体这一属性决定了两点：
<ul>
<li>平台运营部的工作流程中，审核或者“领导”的话语权最大。</li>
<li>平台推送的核心内容是党政主题，占据推送内容的一半左右。</li>
</ul></li>
<li>平台运营部直接管理公众号平台，因而需要与其他各部门的宣传工作对接。</li>
</ul>
<h1 id="部门的纵向工作流程">部门的纵向工作流程</h1>
<p>（？）&gt; 审核老师 &gt; 部长团 &gt; 组长 &gt; 部员</p>
<p>在这样一级一级往下压的建筑中，往往由上层确定主体方向，下层负责设计和实现具体的内容。上层有着对工作内容的一票否决权以及问责下层的权力，因而每一级只需要向上负责。这样的纵向设计常常导致工作效率极慢——一项工作往往由上到下逐渐具体化，交回审核者时会受到旷日持久的审核，并一级一级传递给下层改正。这样的审核常常持续1~2天，工作内容会被反复地进行细节修改乃至推倒重来。同时沟通环节的长度与频率也极大延长了工作周期，当然也给负责修改的下层带来极大的折磨。</p>
<h1 id="横向对接与内部工作">横向对接与内部工作</h1>
<ul>
<li>部门横向对接上，其他部门常常无视书面要求，压着截止时间进行申请对接；至于正常交来的对接申请与材料，我们部门又常常拖到逾期。其他部门的问题姑且不论，我们自己内部工作的问题很大。</li>
<li>我部内部工作架构是部长-&gt;副部长-&gt;组长-&gt;部员（最初设计的时候考虑按文案/排版/封面/设计分组，这种用职能来划分人的方法显然行不通，涉及到培养目标与工作量两方面的问题）。由部长负责分配任务给组长，组长下发给组员。部长与副部长同时负责送审、运营及各项其他事务。
<ul>
<li>一个问题出在当部长这一环停滞时，其他人没有分配调度工作的权力，进而导致工作停摆。停摆到逾期时又需要迅速补救，导致工作压力增大的同时工作质量下降。</li>
<li>另一个问题在于部门没有工作计划表，很多工作会被忽视或者遗忘，需要在临近截止时赶工。</li>
</ul></li>
</ul>
<h1 id="制度">制度</h1>
<ul>
<li>对部员组织系统的培训，将工作规范以书面形式着重强调，避免低级错误的产生可以大大减轻审核压力。</li>
<li>审核出现的一些细节问题可以由上层解决，把所有工作内容乃至责任都交由下层本身是一种懒政行为。</li>
<li>分配调度的权力由部长扩大至部长团，破除职能划定（xx负责排版、xx负责文案这种划定方式显然不符合工作实际），保证工作流程不会因为某个人的缺失而停滞。</li>
</ul>
<p>诚然，很多问题都可以简单归咎于人的因素，归咎于人在能力与性格上的局限性。但根本所在我想还是在制度。认真制定并严格执行的规章制度是一个团队战斗力和凝聚力的关键所在，好的制度可以合理规划工作流程，界定各人权力与职责，进而增加团队的工作效率与内在凝聚力。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title>虎符前端工程实践2</title>
    <url>/2023/06/09/%E8%99%8E%E7%AC%A6%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B52/</url>
    <content><![CDATA[<ul>
<li>如何限制段落最大显示字数</li>
</ul>
<span id="more"></span>
<h1 id="vue-实现限制段落字数">Vue 实现限制段落字数</h1>
<h2 id="原版代码及显示">原版代码及显示：</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-warn-board"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row_spacing"</span> <span class="attr">v-if</span>=<span class="string">"AlertList.length &gt; 0"</span> <span class="attr">v-for</span>=<span class="string">"i in 5"</span> <span class="attr">style</span>=<span class="string">"text-align: left;margin-bottom: 8px"</span>&gt;</span></span><br><span class="line">    {{ AlertList[i].annotations.summary }}</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/2023-6-9-1.png"></p>
<p>我们需要将每段告警限制在一行之内，并将多余字符以 <code>...</code>
替换</p>
<h2 id="vue-实现">Vue 实现</h2>
<p>在 <code>methods</code> 中添加如下方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">truncateText</span>(<span class="params">text, maxLength</span>) {</span><br><span class="line">  <span class="keyword">if</span> (text.<span class="property">length</span> &gt; maxLength) {</span><br><span class="line">    <span class="keyword">return</span> text.<span class="title function_">slice</span>(<span class="number">0</span>, maxLength) + <span class="string">'...'</span></span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> text</span><br><span class="line">},</span><br></pre></td></tr></table></figure>
<p>再在 <code>template</code> 中将页面改成：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-warn-board"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row_spacing"</span> <span class="attr">v-if</span>=<span class="string">"AlertList.length &gt; 0"</span> <span class="attr">v-for</span>=<span class="string">"i in 5"</span> <span class="attr">style</span>=<span class="string">"text-align: left;margin-bottom: 10px"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bullet"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    {{ truncateText(AlertList[i].annotations.summary, 47) }}</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样，我们便成功地实现限制文本长度的功能：</p>
<p><img src="/images/2023-6-9-2.png"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>虎符</tag>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title>虎符前端工程实践1</title>
    <url>/2023/06/06/%E8%99%8E%E7%AC%A6%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B51/</url>
    <content><![CDATA[<ul>
<li>深入 echarts 悬浮提示窗</li>
<li>Vue 页面设置切屏选项</li>
</ul>
<span id="more"></span>
<h1 id="深入-echarts-悬浮提示窗">深入 echarts 悬浮提示窗</h1>
<p>在用 echarts 生成图表的时候，我们可以设置 <a href="https://echarts.apache.org/zh/option.html#tooltip">tooltip</a>
属性生成悬浮窗，通过鼠标悬浮展示当前位置的详细数据。例如，这段代码可以生成如下悬浮窗：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">tooltip</span>: {</span><br><span class="line">  <span class="attr">trigger</span>: <span class="string">'axis'</span>,</span><br><span class="line">  <span class="attr">axisPointer</span>: {</span><br><span class="line">    <span class="attr">type</span>: <span class="string">'cross'</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">padding</span>: [<span class="number">5</span>, <span class="number">10</span>]</span><br><span class="line">},</span><br></pre></td></tr></table></figure>
<ul>
<li><code>trigger</code>：触发类型。
<ul>
<li><code>'axis'</code>：
指定触发提示窗的方式为在坐标轴上的轴线上触发，也就是当鼠标悬停在图表上的时候显示提示窗。</li>
</ul></li>
<li><code>axisPointer</code>：坐标轴指示器配置项，功能优先级低于轴上的
axisPointer。
<ul>
<li><code>type: 'cross'</code>：指定提示窗的指示器类型为交叉指示器，交叉指示器会在X轴和Y轴上都显示一个十字准星，方便用户对鼠标所在位置的数据进行查看。</li>
</ul></li>
</ul>
<p><img src="/images/echarts1.png"></p>
<p>但简单生成的悬浮提示框往往没有单位，导致信息不够直观完善。我通过
<code>tooltip</code> 的 <a href="https://echarts.apache.org/zh/option.html#tooltip.formatter">formatter</a>
选项进行代码改进：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">tooltip</span>: {</span><br><span class="line">  <span class="attr">trigger</span>: <span class="string">'axis'</span>,</span><br><span class="line">  <span class="attr">axisPointer</span>: {</span><br><span class="line">    <span class="attr">type</span>: <span class="string">'cross'</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">padding</span>: [<span class="number">5</span>, <span class="number">10</span>],</span><br><span class="line">  <span class="attr">formatter</span>: <span class="keyword">function</span>(<span class="params">params</span>) {</span><br><span class="line">    <span class="keyword">let</span> tooltipContent = <span class="string">''</span></span><br><span class="line">    params.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item</span>) {</span><br><span class="line">      <span class="keyword">const</span> seriesName = item.<span class="property">seriesName</span></span><br><span class="line">      <span class="keyword">const</span> value = item.<span class="property">value</span></span><br><span class="line">      <span class="keyword">let</span> unit = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// assign unit based on series name</span></span><br><span class="line">      <span class="keyword">if</span> (seriesName === <span class="string">'CPU占用率'</span> || seriesName === <span class="string">'内存占用率'</span> || seriesName === <span class="string">'磁盘占用率'</span>) {</span><br><span class="line">        unit = <span class="string">'%'</span></span><br><span class="line">      } <span class="keyword">else</span> <span class="keyword">if</span> (seriesName === <span class="string">'网络流量流入'</span> || seriesName === <span class="string">'网络流量流出'</span>) {</span><br><span class="line">        unit = <span class="string">'Mb/s'</span></span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="comment">// add unit to data</span></span><br><span class="line">      tooltipContent += seriesName + <span class="string">': '</span> + value + <span class="string">' '</span> + unit + <span class="string">'&lt;br&gt;'</span></span><br><span class="line">    })</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tooltipContent</span><br><span class="line">  }</span><br><span class="line">},</span><br></pre></td></tr></table></figure>
<p><img src="/images/echarts2.png"></p>
<h1 id="vue-页面设置切屏选项">Vue 页面设置切屏选项</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	...</span><br><span class="line">    &lt;el-row type="flex" justify="space-between" class="row_spacing"&gt;</span><br><span class="line">    	&lt;el-col :span="4"&gt;</span><br><span class="line">            &lt;el-radio-group v-model="radio" @change="changeArea"&gt;</span><br><span class="line">                &lt;el-radio-button id="1" :label="$t('config')" /&gt;</span><br><span class="line">                &lt;el-radio-button id="2" :label="$t('status')" /&gt;</span><br><span class="line">            &lt;/el-radio-group&gt;</span><br><span class="line">        &lt;/el-col&gt;</span><br><span class="line"></span><br><span class="line">        &lt;el-col :span="20" class="clearfix"&gt;</span><br><span class="line">          // 已经存在的其他按钮</span><br><span class="line">        &lt;/el-col&gt;</span><br><span class="line">    &lt;/el-row&gt;</span><br><span class="line">	...</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<p>这里用到了 <code>element-ui</code>，<code>el-col</code> 默认分为 24
份，我给需要添加的两个按钮（<strong>配置</strong>和<strong>状态</strong>）分了
”4“ 的空间。</p>
<ul>
<li><code>v-model="radio"</code> 表示将 <code>radio</code> 变量与
<code>&lt;el-radio-group&gt;</code>
组件的选中状态进行双向绑定。当选中状态发生变化时，<code>radio</code>
变量的值也会相应更新</li>
<li><code>@change="changeArea"</code> 则是监听
<code>&lt;el-radio-group&gt;</code> 的 change
事件，并在事件触发时调用名为 <code>changeArea</code> 的方法</li>
<li><em><code>$t</code> 是 Vue I18n 提供的一个函数，用于在 Vue
组件中获取翻译文本。通过 <code>$t('config')</code>，你可以获取名为
<code>'config'</code> 的翻译文本</em></li>
</ul>
<p>接着我们在 <code>method</code> 区域实现
<code>changeArea</code>，总体思路是根据 <code>radio</code>
控制两个段落的显示</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">changeArea</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">const</span> config = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'config'</span>)</span><br><span class="line">  <span class="keyword">const</span> status = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'status'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (<span class="variable language_">this</span>.<span class="property">radio</span>) {</span><br><span class="line">    <span class="keyword">case</span> <span class="variable language_">this</span>.$t(<span class="string">'config'</span>):</span><br><span class="line">      config.<span class="property">style</span>.<span class="property">display</span> = <span class="string">'block'</span></span><br><span class="line">      status.<span class="property">style</span>.<span class="property">display</span> = <span class="string">'none'</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable language_">this</span>.$t(<span class="string">'status'</span>):</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">showStatus</span> = <span class="string">'true'</span></span><br><span class="line">      config.<span class="property">style</span>.<span class="property">display</span> = <span class="string">'none'</span></span><br><span class="line">      status.<span class="property">style</span>.<span class="property">display</span> = <span class="string">'block'</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  }</span><br><span class="line">},</span><br></pre></td></tr></table></figure>
<p>同时，我还希望点进页面的时候默认显示<strong>配置</strong>内容，那么只需要在
<code>data</code> 中加入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    <span class="attr">radio</span>: <span class="variable language_">this</span>.$t(<span class="string">'config'</span>),</span><br><span class="line">  }</span><br><span class="line">},</span><br></pre></td></tr></table></figure>
<h2 id="bug">Bug</h2>
<ul>
<li>问题一在于，初始的时候不会调用
<code>changeArea</code>，我很痛苦的发现两个段落同时工作了（现在发现不会出现，应该是个未定义的bug）。
<ul>
<li>方案一：我在 <a href="https://cn.vuejs.org/api/options-lifecycle.html#mounted">mounted</a>
生命周期中调用 <code>changeArea</code>
函数，在组件被挂载之后调用函数显然可以修复这一问题。</li>
</ul></li>
<li>问题二在于，采用方案一后<strong>状态</strong>对应的图表不再加载，除非我改变页面大小。这个问题很诡异，迫使我另辟蹊径去解决问题一。</li>
</ul>
<h2 id="修复">修复</h2>
<p>自始至终的问题在<strong>状态</strong>这一选项上，初始化时它作为不速之客蹦出来，改正后又姗姗不来。所以我在
<code>data</code> 中添加了 <code>showStatus</code> 这一参数并初始化为
<code>false</code>，并在状态段落添加 <code>v-if="showStatus"</code>
属性。在 <code>changeArea</code> 触发 <code>status</code> 条件后才会置为
<code>true</code>。这样，就完美控制了<strong>状态</strong>段落的显示。</p>
<p><img src="/images/2023-6-6-1.png"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>虎符</tag>
        <tag>VUE</tag>
        <tag>echarts</tag>
      </tags>
  </entry>
</search>
