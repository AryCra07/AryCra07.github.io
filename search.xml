<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>虎符前端工程实践1</title>
    <url>/2023/06/06/%E8%99%8E%E7%AC%A6%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B51/</url>
    <content><![CDATA[<ul>
<li>深入 echarts 悬浮提示窗</li>
<li>Vue 页面设置切屏选项</li>
</ul>
<span id="more"></span>
<h1 id="深入-echarts-悬浮提示窗">深入 echarts 悬浮提示窗</h1>
<p>在用 echarts 生成图表的时候，我们可以设置 <a href="https://echarts.apache.org/zh/option.html#tooltip"><code>tooltip</code></a>
属性生成悬浮窗，通过鼠标悬浮展示当前位置的详细数据。例如，这段代码可以生成如下悬浮窗：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">tooltip</span>: {</span><br><span class="line">  <span class="attr">trigger</span>: <span class="string">'axis'</span>,</span><br><span class="line">  <span class="attr">axisPointer</span>: {</span><br><span class="line">    <span class="attr">type</span>: <span class="string">'cross'</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">padding</span>: [<span class="number">5</span>, <span class="number">10</span>]</span><br><span class="line">},</span><br></pre></td></tr></table></figure>
<ul>
<li><code>trigger</code>：触发类型。
<ul>
<li><code>'axis'</code>：
指定触发提示窗的方式为在坐标轴上的轴线上触发，也就是当鼠标悬停在图表上的时候显示提示窗。</li>
</ul></li>
<li><code>axisPointer</code>：坐标轴指示器配置项，功能优先级低于轴上的
axisPointer。
<ul>
<li><code>type: 'cross'</code>：指定提示窗的指示器类型为交叉指示器，交叉指示器会在X轴和Y轴上都显示一个十字准星，方便用户对鼠标所在位置的数据进行查看。</li>
</ul></li>
</ul>
<p><img src="/images/echarts1.png"></p>
<p>但简单生成的悬浮提示框往往没有单位，导致信息不够直观完善。我通过
<code>tooltip</code> 的 <a href="https://echarts.apache.org/zh/option.html#tooltip.formatter"><code>formatter</code></a>
选项进行代码改进：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">tooltip</span>: {</span><br><span class="line">  <span class="attr">trigger</span>: <span class="string">'axis'</span>,</span><br><span class="line">  <span class="attr">axisPointer</span>: {</span><br><span class="line">    <span class="attr">type</span>: <span class="string">'cross'</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">padding</span>: [<span class="number">5</span>, <span class="number">10</span>],</span><br><span class="line">  <span class="attr">formatter</span>: <span class="keyword">function</span>(<span class="params">params</span>) {</span><br><span class="line">    <span class="keyword">let</span> tooltipContent = <span class="string">''</span></span><br><span class="line">    params.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item</span>) {</span><br><span class="line">      <span class="keyword">const</span> seriesName = item.<span class="property">seriesName</span></span><br><span class="line">      <span class="keyword">const</span> value = item.<span class="property">value</span></span><br><span class="line">      <span class="keyword">let</span> unit = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// assign unit based on series name</span></span><br><span class="line">      <span class="keyword">if</span> (seriesName === <span class="string">'CPU占用率'</span> || seriesName === <span class="string">'内存占用率'</span> || seriesName === <span class="string">'磁盘占用率'</span>) {</span><br><span class="line">        unit = <span class="string">'%'</span></span><br><span class="line">      } <span class="keyword">else</span> <span class="keyword">if</span> (seriesName === <span class="string">'网络流量流入'</span> || seriesName === <span class="string">'网络流量流出'</span>) {</span><br><span class="line">        unit = <span class="string">'Mb/s'</span></span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="comment">// add unit to data</span></span><br><span class="line">      tooltipContent += seriesName + <span class="string">': '</span> + value + <span class="string">' '</span> + unit + <span class="string">'&lt;br&gt;'</span></span><br><span class="line">    })</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tooltipContent</span><br><span class="line">  }</span><br><span class="line">},</span><br></pre></td></tr></table></figure>
<p><img src="/images/echarts2.png"></p>
<h1 id="vue-页面设置切屏选项">Vue 页面设置切屏选项</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	...</span><br><span class="line">    &lt;el-row type="flex" justify="space-between" class="row_spacing"&gt;</span><br><span class="line">    	&lt;el-col :span="4"&gt;</span><br><span class="line">            &lt;el-radio-group v-model="radio" @change="changeArea"&gt;</span><br><span class="line">                &lt;el-radio-button id="1" :label="$t('config')" /&gt;</span><br><span class="line">                &lt;el-radio-button id="2" :label="$t('status')" /&gt;</span><br><span class="line">            &lt;/el-radio-group&gt;</span><br><span class="line">        &lt;/el-col&gt;</span><br><span class="line"></span><br><span class="line">        &lt;el-col :span="20" class="clearfix"&gt;</span><br><span class="line">          // 已经存在的其他按钮</span><br><span class="line">        &lt;/el-col&gt;</span><br><span class="line">    &lt;/el-row&gt;</span><br><span class="line">	...</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<p>这里用到了 <code>element-ui</code>，<code>el-col</code> 默认分为 24
份，我给需要添加的两个按钮（<strong>配置</strong>和<strong>状态</strong>）分了
”4“ 的空间。</p>
<ul>
<li><code>v-model="radio"</code> 表示将 <code>radio</code> 变量与
<code>&lt;el-radio-group&gt;</code>
组件的选中状态进行双向绑定。当选中状态发生变化时，<code>radio</code>
变量的值也会相应更新</li>
<li><code>@change="changeArea"</code> 则是监听
<code>&lt;el-radio-group&gt;</code> 的 change
事件，并在事件触发时调用名为 <code>changeArea</code> 的方法</li>
<li><em><code>$t</code> 是 Vue I18n 提供的一个函数，用于在 Vue
组件中获取翻译文本。通过 <code>$t('config')</code>，你可以获取名为
<code>'config'</code> 的翻译文本</em></li>
</ul>
<p>接着我们在 <code>method</code> 区域实现
<code>changeArea</code>，总体思路是根据 <code>radio</code>
控制两个段落的显示</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">changeArea</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">const</span> config = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'config'</span>)</span><br><span class="line">  <span class="keyword">const</span> status = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'status'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (<span class="variable language_">this</span>.<span class="property">radio</span>) {</span><br><span class="line">    <span class="keyword">case</span> <span class="variable language_">this</span>.$t(<span class="string">'config'</span>):</span><br><span class="line">      config.<span class="property">style</span>.<span class="property">display</span> = <span class="string">'block'</span></span><br><span class="line">      status.<span class="property">style</span>.<span class="property">display</span> = <span class="string">'none'</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable language_">this</span>.$t(<span class="string">'status'</span>):</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">showStatus</span> = <span class="string">'true'</span></span><br><span class="line">      config.<span class="property">style</span>.<span class="property">display</span> = <span class="string">'none'</span></span><br><span class="line">      status.<span class="property">style</span>.<span class="property">display</span> = <span class="string">'block'</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  }</span><br><span class="line">},</span><br></pre></td></tr></table></figure>
<p>同时，我还希望点进页面的时候默认显示<strong>配置</strong>内容，那么只需要在
<code>data</code> 中加入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    <span class="attr">radio</span>: <span class="variable language_">this</span>.$t(<span class="string">'config'</span>),</span><br><span class="line">  }</span><br><span class="line">},</span><br></pre></td></tr></table></figure>
<h2 id="bug">Bug</h2>
<ul>
<li>问题一在于，初始的时候不会调用
<code>changeArea</code>，我很痛苦的发现两个段落同时工作了（现在发现不会出现，应该是个未定义的bug）。
<ul>
<li>方案一：我在 <a href="https://cn.vuejs.org/api/options-lifecycle.html#mounted"><code>mounted</code></a>
生命周期中调用 <code>changeArea</code>
函数，在组件被挂载之后调用函数显然可以修复这一问题。</li>
</ul></li>
<li>问题二在于，采用方案一后<strong>状态</strong>对应的图表不再加载，除非我改变页面大小。这个问题很诡异，迫使我另辟蹊径去解决问题一。</li>
</ul>
<h2 id="修复">修复</h2>
<p>自始至终的问题在<strong>状态</strong>这一选项上，初始化时它作为不速之客蹦出来，改正后又姗姗不来。所以我在
<code>data</code> 中添加了 <code>showStatus</code> 这一参数并初始化为
<code>false</code>，并在状态段落添加 <code>v-if="showStatus"</code>
属性。在 <code>changeArea</code> 触发 <code>status</code> 条件后才会置为
<code>true</code>。这样，就完美控制了<strong>状态</strong>段落的显示。</p>
<p><img src="/images/2023-6-6-1.png"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>VUE</tag>
        <tag>echarts</tag>
      </tags>
  </entry>
</search>
