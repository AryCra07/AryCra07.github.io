{"posts":[{"title":"谈北邮计语工作改进","text":"在北邮计语融媒体中心平台运营部工作了两年，一年当部员一年当副部。这两年里，我接手了从推送制作到公众号运营几乎所有类型的任务，经历亦或是经验不能算不丰富。只是临别回想工作得失，不免诸多遗憾，在此一表。 北邮计语平台运营部是什么？ 北邮计语公众号本质上是北邮计院的官方媒体，由北邮计语融媒体中心平台运营部负责推送的制作、发布与日常运营。 官方媒体这一属性决定了两点： 平台运营部的工作流程中，审核或者“领导”的话语权最大。 平台推送的核心内容是党政主题，占据推送内容的一半左右。 平台运营部直接管理公众号平台，因而需要与其他各部门的宣传工作对接。 部门的纵向工作流程 （？）&gt; 审核老师 &gt; 部长团 &gt; 组长 &gt; 部员 在这样一级一级往下压的建筑中，往往由上层确定主体方向，下层负责设计和实现具体的内容。上层有着对工作内容的一票否决权以及问责下层的权力，因而每一级只需要向上负责。这样的纵向设计常常导致工作效率极慢——一项工作往往由上到下逐渐具体化，交回审核者时会受到旷日持久的审核，并一级一级传递给下层改正。这样的审核常常持续1~2天，工作内容会被反复地进行细节修改乃至推倒重来。同时沟通环节的长度与频率也极大延长了工作周期，当然也给负责修改的下层带来极大的折磨。 横向对接与内部工作 部门横向对接上，其他部门常常无视书面要求，压着截止时间进行申请对接；至于正常交来的对接申请与材料，我们部门又常常拖到逾期。其他部门的问题姑且不论，我们自己内部工作的问题很大。 我部内部工作架构是部长-&gt;副部长-&gt;组长-&gt;部员（最初设计的时候考虑按文案/排版/封面/设计分组，这种用职能来划分人的方法显然行不通，涉及到培养目标与工作量两方面的问题）。由部长负责分配任务给组长，组长下发给组员。部长与副部长同时负责送审、运营及各项其他事务。 一个问题出在当部长这一环停滞时，其他人没有分配调度工作的权力，进而导致工作停摆。停摆到逾期时又需要迅速补救，导致工作压力增大的同时工作质量下降。 另一个问题在于部门没有工作计划表，很多工作会被忽视或者遗忘，需要在临近截止时赶工。 制度 对部员组织系统的培训，将工作规范以书面形式着重强调，避免低级错误的产生可以大大减轻审核压力。 审核出现的一些细节问题可以由上层解决，把所有工作内容乃至责任都交由下层本身是一种懒政行为。 分配调度的权力由部长扩大至部长团，破除职能划定（xx负责排版、xx负责文案这种划定方式显然不符合工作实际），保证工作流程不会因为某个人的缺失而停滞。 诚然，很多问题都可以简单归咎于人的因素，归咎于人在能力与性格上的局限性。但根本所在我想还是在制度。认真制定并严格执行的规章制度是一个团队战斗力和凝聚力的关键所在，好的制度可以合理规划工作流程，界定各人权力与职责，进而增加团队的工作效率与内在凝聚力。","link":"/2023/07/05/%E8%B0%88%E5%8C%97%E9%82%AE%E8%AE%A1%E8%AF%AD%E5%B7%A5%E4%BD%9C%E6%94%B9%E8%BF%9B/"},{"title":"虎符前端工程实践2","text":"如何限制段落最大显示字数 Vue 实现限制段落字数 原版代码及显示： 12345&lt;div class=\"item-warn-board\"&gt; &lt;div class=\"row_spacing\" v-if=\"AlertList.length &gt; 0\" v-for=\"i in 5\" style=\"text-align: left;margin-bottom: 8px\"&gt; {{ AlertList[i].annotations.summary }} &lt;/div&gt;&lt;/div&gt; 我们需要将每段告警限制在一行之内，并将多余字符以 ... 替换 Vue 实现 在 methods 中添加如下方法： 123456truncateText(text, maxLength) { if (text.length &gt; maxLength) { return text.slice(0, maxLength) + '...' } return text}, 再在 template 中将页面改成： 123456&lt;div class=\"item-warn-board\"&gt; &lt;div class=\"row_spacing\" v-if=\"AlertList.length &gt; 0\" v-for=\"i in 5\" style=\"text-align: left;margin-bottom: 10px\"&gt; &lt;span class=\"bullet\"&gt;&lt;/span&gt; {{ truncateText(AlertList[i].annotations.summary, 47) }} &lt;/div&gt;&lt;/div&gt; 这样，我们便成功地实现限制文本长度的功能：","link":"/2023/06/09/%E8%99%8E%E7%AC%A6%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B52/"},{"title":"虎符前端工程实践1","text":"深入 echarts 悬浮提示窗 Vue 页面设置切屏选项 深入 echarts 悬浮提示窗 在用 echarts 生成图表的时候，我们可以设置 tooltip 属性生成悬浮窗，通过鼠标悬浮展示当前位置的详细数据。例如，这段代码可以生成如下悬浮窗： 1234567tooltip: { trigger: 'axis', axisPointer: { type: 'cross' }, padding: [5, 10]}, trigger：触发类型。 'axis'： 指定触发提示窗的方式为在坐标轴上的轴线上触发，也就是当鼠标悬停在图表上的时候显示提示窗。 axisPointer：坐标轴指示器配置项，功能优先级低于轴上的 axisPointer。 type: 'cross'：指定提示窗的指示器类型为交叉指示器，交叉指示器会在X轴和Y轴上都显示一个十字准星，方便用户对鼠标所在位置的数据进行查看。 但简单生成的悬浮提示框往往没有单位，导致信息不够直观完善。我通过 tooltip 的 formatter 选项进行代码改进： 123456789101112131415161718192021222324252627tooltip: { trigger: 'axis', axisPointer: { type: 'cross' }, padding: [5, 10], formatter: function(params) { let tooltipContent = '' params.forEach(function(item) { const seriesName = item.seriesName const value = item.value let unit = '' // assign unit based on series name if (seriesName === 'CPU占用率' || seriesName === '内存占用率' || seriesName === '磁盘占用率') { unit = '%' } else if (seriesName === '网络流量流入' || seriesName === '网络流量流出') { unit = 'Mb/s' } // add unit to data tooltipContent += seriesName + ': ' + value + ' ' + unit + '&lt;br&gt;' }) return tooltipContent }}, Vue 页面设置切屏选项 12345678910111213141516&lt;template&gt; ... &lt;el-row type=\"flex\" justify=\"space-between\" class=\"row_spacing\"&gt; &lt;el-col :span=\"4\"&gt; &lt;el-radio-group v-model=\"radio\" @change=\"changeArea\"&gt; &lt;el-radio-button id=\"1\" :label=\"$t('config')\" /&gt; &lt;el-radio-button id=\"2\" :label=\"$t('status')\" /&gt; &lt;/el-radio-group&gt; &lt;/el-col&gt; &lt;el-col :span=\"20\" class=\"clearfix\"&gt; // 已经存在的其他按钮 &lt;/el-col&gt; &lt;/el-row&gt; ...&lt;/template&gt; 这里用到了 element-ui，el-col 默认分为 24 份，我给需要添加的两个按钮（配置和状态）分了 ”4“ 的空间。 v-model=\"radio\" 表示将 radio 变量与 &lt;el-radio-group&gt; 组件的选中状态进行双向绑定。当选中状态发生变化时，radio 变量的值也会相应更新 @change=\"changeArea\" 则是监听 &lt;el-radio-group&gt; 的 change 事件，并在事件触发时调用名为 changeArea 的方法 $t 是 Vue I18n 提供的一个函数，用于在 Vue 组件中获取翻译文本。通过 $t('config')，你可以获取名为 'config' 的翻译文本 接着我们在 method 区域实现 changeArea，总体思路是根据 radio 控制两个段落的显示 12345678910111213141516changeArea() { const config = document.getElementById('config') const status = document.getElementById('status') switch (this.radio) { case this.$t('config'): config.style.display = 'block' status.style.display = 'none' break case this.$t('status'): this.showStatus = 'true' config.style.display = 'none' status.style.display = 'block' break }}, 同时，我还希望点进页面的时候默认显示配置内容，那么只需要在 data 中加入 12345data() { return { radio: this.$t('config'), }}, Bug 问题一在于，初始的时候不会调用 changeArea，我很痛苦的发现两个段落同时工作了（现在发现不会出现，应该是个未定义的bug）。 方案一：我在 mounted 生命周期中调用 changeArea 函数，在组件被挂载之后调用函数显然可以修复这一问题。 问题二在于，采用方案一后状态对应的图表不再加载，除非我改变页面大小。这个问题很诡异，迫使我另辟蹊径去解决问题一。 修复 自始至终的问题在状态这一选项上，初始化时它作为不速之客蹦出来，改正后又姗姗不来。所以我在 data 中添加了 showStatus 这一参数并初始化为 false，并在状态段落添加 v-if=\"showStatus\" 属性。在 changeArea 触发 status 条件后才会置为 true。这样，就完美控制了状态段落的显示。","link":"/2023/06/06/%E8%99%8E%E7%AC%A6%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B51/"}],"tags":[{"name":"前端","slug":"前端","link":"/tags/%E5%89%8D%E7%AB%AF/"},{"name":"虎符","slug":"虎符","link":"/tags/%E8%99%8E%E7%AC%A6/"},{"name":"VUE","slug":"VUE","link":"/tags/VUE/"},{"name":"echarts","slug":"echarts","link":"/tags/echarts/"},{"name":"杂谈","slug":"杂谈","link":"/tags/%E6%9D%82%E8%B0%88/"},{"name":"思考","slug":"思考","link":"/tags/%E6%80%9D%E8%80%83/"}],"categories":[{"name":"前端","slug":"前端","link":"/categories/%E5%89%8D%E7%AB%AF/"},{"name":"随笔","slug":"随笔","link":"/categories/%E9%9A%8F%E7%AC%94/"}],"pages":[{"title":"categories","text":"","link":"/categories/index.html"},{"title":"life","text":"","link":"/life/index.html"},{"title":"","text":"关于本博客 写作对我来说是一件爱恨交织的事情。我喜欢将自己的所思所感诉诸文字，却又往往囿于斟词酌句和重构文章结构中无法自拔。但我想这件事情总归是值得坚持的，它可以让我更加严肃的去审视、思考并总结，以安静的文字沉淀下来。这是我想要的生活方式吧，见字如面。 我的博客主要分为以下三个部分： 成于思：严肃思考 勤于学：知识学习 敏于行：工程实践 歌于途：生活随感 关于我 北京邮电大学计算机学院本科生 主要兴趣在全栈开发","link":"/about/index.html"},{"title":"tags","text":"","link":"/tags/index.html"},{"title":"","text":"敏于行：工程实践 虎符系列 “虎符”是徐鹏老师的云实验室项目，我忝列其中担任一些前端任务。 虎符前端工程实践1","link":"/tech/index.html"},{"title":"","text":"","link":"/study/index.html"},{"title":"","text":"","link":"/think/index.html"}]}