{"posts":[{"title":"又日新-2025Jan","text":"226ddbb6d87d935d995eb2cfacee44c3b04ce12ecd979cc1732b8ca32f36c7713f267bffbf4f57c997c86cf464506094a980c4c8db56311b3fbcf4e725038f4d4a54542fcd254f2546ae18eb5e6c51d1a0e562cd8962031f55f74ec9568bf08dcc3b23bcb0d6969c314a6370e578bf091b3e9255e813a215bb4f17ba08b9737808d93c5a692f122b224230706960bda55e514b51c04de746ff1e061028b7350733b548c941478ac8c350d555f99b915ba0db83042a3da92c9379ac67eff92dc613298e3d62bf5dcdf5ddf8e2a4389cf7ef6524ae6d723976001ed1968e6dd9c6d61e123e3f5574f61daec5868cb0ba506b6bf93a7f2e7ca48ebe354fd5de5ac70eec7891070f9edc94e0fb29d40fb30840f3e60fece9904a8fd4a8f23ec8375f57f63d6d5f66e375153ad3352daaa451cef7bb105e152ab2ec80373e2c8c23e2eb6c93b15a22c0da4e576fce0a4132d0522c2d4f272a4864bde19a47467462f5b8db611a450181bf37015feeec2c368142f4af9e90e9771e48d9146217fa51123e44395edfed48dc01d5cdd2b488bb6a21379887d9b9e6b8a0c3c4ce9453c8ecc45b345fc29916c300df76959d6e69e386b1e16b16f1ba9ec376a3e38466374c0e4e3e5738de70230b5a3ef04d904dbd7b71fcb82b357c44fa81384ad2d4fc8e7b47f01e411841256a323415fbfa1cb3bdfe52be99c66c2e4aa3da76921dddeb645a0829ba5453f2ef61c3698ad111858433b3ede13f46ea162e653e8b0c7fe530821731a60592fb72c71fd43d2db26a772575ceeb675ebb7e04d675c53d06eb5809ba3f127411012b13ea7c1cbb3169b61e48c92fea11c6be256d97f71deb50fb12df5e6744bc83576342f8831553ba76fbe0554a34f32534a69cd54e2edb4745c36c4736f13560a78e02c62c8cfc30221824309d2d868407c91cd4a277dc5d57a5f0b402c34087847172c5f85328537a85079d6c81f810572ff13113b3747854568ed2c3b84849c281c1cb87d0964ddebada5750decb2cfc96c933a41a7a947032ed4705591666cca9882b276f8c9fd199a461422665aef67763e6c9cf8bc1b5831d0ff0e23ef55882531424e1328f3228640049832688fd08f8166ef1884d6692a862bda3e3e84799c2cc91d3d59b7a7809d2e029389965578f36981e4e8bc5b5e021eeff03b373cdb604d00d78af532db439f7740e113cc9a3b0794d59771b8cd1c3443698e33beb0b76104248ec396fa78e44287c88005ac8dd28abe71cec625460558327b369fc0eb41463d204937a21b301a9e53a17622b9bf1a1dc89efa9d56450b00dd0378f5db94412c98d311e81a198b06b8417edfad850502976e00d4e9a9a127020feefcabe4693dca2f56926ed8a84f6aba1ec29b5d2d15d1d1b75bb9647539f320a40ae2ff00451cf8f3f2d9ea50ad9b8137a0007ad93ce77ea67741130291dd204c9f8068dcb9f05f5b4ecc66fae38bc6a6c98e26cca7347d36cecef6cb964a708307a271a29830acc4fff8ffe2cbbcc2c6b0bd379d8579e7b4e66e764e884910d0c1fb35acbd72877ebfead542e21fe2240bd846b93ad7172a47b6a00494015dd9f91fcad7d9b340ba68524c1b97abcc91c269069e2a08dd1d217f24914bcc6f1c186b16d91dfb61f7700680c472c7b4ddb1378807f369f9632db02a0e0ac5e2c2fb3163bc4bdaaa7ff3c41292a8f838401816b0348582ebcd5125d51d0f9509b0c84a3fbdd7c3ed3d993fad89c902c42838d83592796ce3fca249daedf6f2d506f1f60d043c44fe585e669c338f5148b9e19fba44dbee74485c8cae2bd6ab2558e1e5087b3a89139baba69c3dbb7141ef95056bbdc493c2f44e2d7a94bbc408409e2e233806c8b7dd458ccac87aa9be7c33ed61867b7b77d697c31057378569ed16507bebbbea36237083f392fa7d6bbaf21e24760e1dd4cbc41f2f33187715fb609d5fb17ceed5d66da81a110bd556318a86d98afb99c87f0f6a0bf0b4019f30b87ce994a1c80bfd0c2bd92f89de9453dec67849a919595d2b0a7d9f8f0c690728944b76a44ff47c85ad5dc4621a96be5fd0a694de6c6dc438bfe3ca4af050115b054906f0655dab0ef0ed6ead1c4da514989c96d04f5e018e0894dfa5608257d3e15072d0d8e51e42a625db9e505cdfce2b0d632f618142d153548fe2f18fc20a414b77b21f07cdd238664973609557d2fe0d323232fcfb5bf7c9b990fffa7726e0c55e0ac051ce992038595683619fc5ce736f5f15a2019e51257fefdaec27a3a220d155597b81d0119aef07cee27bc999c99b77b62524e538ff12aa93fcd796b7e24f8f85a958266670ada0b0d66929c374157033b22ca074c846aec83dae480bb1f833a26197584daf6c97e78108eb84baffa2f5b1b050d29d09478010f15d40f458dd5a616acce488026515de91fe8daa615f61d3b3b4255481003132d00c09dc0ecadb64944cb8c40d0fa81673fcf73d6e5911c30da8b53ddc1cb06750a0c894d83fadb enter password...","link":"/2025/01/03/diary/2025jan/"},{"title":"又日新-2024","text":"226ddbb6d87d935d995eb2cfacee44c3b04ce12ecd979cc1732b8ca32f36c7713f267bffbf4f57c997c86cf464506094a980c4c8db56311b3fbcf4e725038f4d4a54542fcd254f2546ae18eb5e6c51d1e05c7c9bbebac2f4beeb2a180ac1cab4366147d0f5ba21a4cfeaae47db385e53a875e694ba6bf201fb0162a01bbea5937852116981959c25d8b5614c0140c9d3bb393d14f7c30b86518776eea82fe5b4efeb0d66c7b9e62ac1cf161a0e4f8a335036d56a3579b5906caa7f74a2db491eaa90573982bfeb4d8144bce4612f64e70eccd7a2cc38ad03c7fea922a8c493cb0d07d52ea063b712a7faf180cd04fcbed473a2b7bd7ac9776c5c62ac6394f7aa876c39ce45471a231c498aef04208f52d00c61e2eed30342154e2898fc56dc09bd1929912a724ae972ea15dbd7b528b193d61c98b719b24422c4f445bf952eef5ffe92071a0348824b41922184c6c3ced3888371da1123f49267682e7d508babee8813f6146185bc876646084affda04d2abd1401b64b7efac27e90a0c77a75be0c63f62169c00b9ee22228671d5b9998fd5d14d58025409b243241ae58703f6d38d810aef92b24e9c8c53e9d5c83056b9abfc7ae24f834c5057dec15d80e3b3e1f0de4acb60354d3b3ccc671efe1c7b404728bbe999851de967c637decc453c84ed1e2b194f9660dc10acfa07dd1f21d64b519cb313df386ffa4ec2158fafe5f5ae938ac4ada18717d6952611b173e9ed1e52fb3d5528154af0296b08a1790227e70563119fa7da0c8863f086d8c6e439d9e4978939dd9213005ea0f7fb3f156d4b744528b49927cbb1d8a8e1b1fa0aa4f0d632ccf6b74902ea57870f17200f287d50ba8cb7cc4ca277c947b7047bec56a9b5a12b40f00b6c1ef2e9732df1f8b90115b9f5bfa3902fa807ca87f09b5ef30c8ef4195e511bf524f89d2415cd5a356bd7d705fdb2da670ad4fdf2454e7362f01866e744a584e3b3498d5a187238693ebb056d8160d7787fc4fa9a5af521b9a58e34784f3ef9e13971f964192b4ed9aea985386b2c6199f2a0391338b898612ded653f73125574139e70dcfad599d4e0f5cafd82afd27835cacf236b242fef8ee9985e1c0f5fa6ddfe9f38b68cbbe07e36a9a2418c776946cf09bf81e1a2b13306623cb3aaa7b319e9d3497434080837aeb19bfbbf7190943c007f1c54bdb7c137d1b4ad255e465343d3449623543ad4f95440b9de3afc4a89e3d0ad6fc9fc380e91439ece3fc4ef180ba58b83ae2be04c27e97f8941b46c4c36e97a358461113dc96ff272bb43a2eba7ca8db55e5f9fce881636a9a9a29605d334280242b345ffd055701a85e241ce90839edb540667292494315f06fe4aceb76de2ebb03f2b46da78960ec5f5fc4ac990d161f53325f51473c27216aa986b27ac14d57aa470254868b536134357252e4e576065b47671898a0c3f8d8fc924c0dccbc0820629ff123c6b12c5e7f3ca6003463cdcb3e4b48eb06724f1ba63b2c3c3b796ce2bd96812aa2e071d769019badbb36803e2a13f446b2b62ac2af1dede21c8f2f7c65a994e06e99fda9cebc54c5d94c518f526fe4877cf88b81594e167d0b9b9d2a704ef9c7f85411de11c26ccb86bff802956eb281f868bddcb7ea2082a11c5e29b5bc979a708bec1cca0cee190fd510e3fcfbc5d84d1aa35797ea37acb2995538ff1b4584e9ea0f726809454aeb6616358f34fc57fb6812263082f7939583b07a933cd1bc216bbc26a8b9e3d6fc079bdd291ae010004a6ce0c6e9fa6ee21328980796665720cf09430cfca81052a56f9025f30307969878a4ca6ec0f0c9608be22829f98bdaf4b48de0a62957f3a490b24d990d5b2babc368879a344a6c202ce329c5d6715fb905df13546d9765426c2113e1100d79e91fe79cd42d462e06b8719f578557ca954bdeca55d18c9b26c17ca495171b7a8ee81947861932344cfbebcb8cee7cd2999a72d808c1a5b7f72af43f8623e351ef327c4fa08d019996dd936ea71205f48feb16862e17ea574ccc2ec3d4cb54d38bf6544d9aae8c8860179eb218cdff56b77100b5a6779f1a5809f5c23b616d0a0e4d7fae9a27be6b41e840bfe51c5897e59095a99f5d6c9766fb5788bd36a11e3af08b692eef3b503f5b3a1386251ac305a13daeaae258dc5902e68d870a8059a0d0216db5fcb6e5aa74850ee4850f00ffae024d43f9fd3fa8d96af885a1cb2db1c2e36f9ba2f1c510b13d08ef7ccb4979bf10d4fb50caa88c032365440e034c4e7971ed181123a5f2ef10eb8dc9c5d38ffd1bb08540bb00ef8d591b4ef78f1fc77cf57cdf21d47223ae85ad1240b9225fa9644fd8e7b4964e6be6243facf28fa70f1eb5969e6e812f5e67106a900476ff59b3e3819b92565ad9ae21432d8ce018cec0e80457a2873686c8d6024f0ce381d9e1a035fed36ba58cb07dc440e9f0c00809e9e2070d5d83da991900c936df9953385770bed4b3891d1f3f2663d24eb6aba63d2aef583e1abb288d05b738d6065301e63c17c0021490bc713c98d2cbb8f611d70288b2c3be8814a0db9f4cb010140aef3eef9cbb2dadc0258c31ce4a1e02011b3868165d0058b8b5410b4ce3999aba8cc84f4f19428d765bbf412c39c27f79da3601fe16c57c4739405a740f540f398725bf3da908ca2a41879372e242b6c38e9d68fd6670f82495890b6929eea3f11ecea4b9a00dd4a89e66e19c69c57201ae6a238e97423d9c2b28bdb3ebfe0903dafc7ef68bd45c22a96c00866ea996dc33e6791907f34b0dc51c7ca2755dc5bf67f49d7ead8ad474e7ce06386b25f30feb02327579101d20ec6c3da0d9f25eefc3ea48d571551ee8686fd2bbd225a1e1f66e97c135199ffecb7767374d19f8ab540876ea61aaf11df8e189876cac4b82eec6da1a460d4a6cccc3d1a0114ceba9b61efa3c86597548a05d5a92355b392db1b3b985c627cfb13cba22e9f5bf858f88497e6c2cd5ff383324a150c3facb68703ff691636d0fe4c17bf3782b7c8a8a0aa6b4b104ce88587079282f84a648b8c8e3eed7d5dc3a22d70543443ccd36b14dcdce34d299ea1c7d39e20252d8bef171a08d220ab59cf45d340ec379f90bb7cd9e4e31e56208ad01c013630a955d32c69c25ed58d34959d8851799f18bbe2dbd2d951e937e1bec171ff28c9ea637bb213016f18023229e50e6adaafd11277e7c10e2911a55bf7efcf65d860e0489459cbcb08c995134c60a172764e785bb5696453fcee461013cc4d2b3f410f21d94763b864c23232ded4b045c34654a5dcfcabc2466aa6779fc235ee3e12e96be6b54dcd414420ac200d85457929bf0fa72c42cfb2736846a55bed2c8c41e86fab84652d5cbee874c50befcf3f5c4a766cec6ec57c2b8b67f6f4bd5d6284a7bd02f50e0ee5a637757a4bf3b48fbfa5fdf38a10e21778b2748f2864d5ab92530f7473438bbeb5d789beb89f0908068d84a691ec279b9fdd181e1be42b930d1bdd13729fc1bc373c60f4cd7a4531c0978bb7b2bb59133177dd6a1e278d8f3592308f049e4395088d54a4cacd56091864bb4bd6b9f8b19db483fa026ce8e5978c57cec34dcb36cd42c96ba014973bde29a9518a25cb42dc3faeaa0205fe15039dbedc28478276acc8a55fd3988174ffb232191668483474a489cc0c9a5d93a12fd8e0f62637cb9d5a6fa29ff0951decbe2b64759f8ffa40fd7bccc9f9c88fe0520b3fede4c1b4dea10dcf2f0feb3fe081471ed3a220c1d0160ea5209b3b71e805b6288cb0dc5b55f27100ff80cd30496d2a646bed142b5a47dc93565760daabc3b06569d282e3f26cc491b25bc5c196e8f0913dcc7b8159798439f62209115f2d39e5f1d88be3a57de9b157b0a5e2eb6a39e834c35c55c584c062246d6f067257d476e4d5a5d9a820af4066b6be84d58f1647e57171df1918fd8bc559e28af974213eca72c46b065232afd323913321e3755a23ccf7cc8f30f0349dc8c1453e45754afab217617979dddab153dbc2502298f97a7604491f16570bd29fe629e77dfb1c0f19fecfdb3c2264732b4e5c8c2882de730bb4b90d4cfaea3c3faf6e5cf69f517376fa4dac966cd3e41b996e59f6c93938ce3bc4c2ca48aa72ac2a8a9f326c2cea617a6d34a90fdfae582e2aa638baf28a021c1028e638499bb5b83c78f88dafcf22a3ce264ba6dbaf923183688d421bfedc9a91f7aeba14329e6bc08fd935645eac2aae1932bae9be06ba956c27fbadae332d01ab6f09f6243351062605842b0ba57c329b603a69931818089de5427f035a158af8bc39fe157555fdef5cfaa076e94d9ce504972e3c376e271e2074f36123497d0d77239ac090395ff95fb37862acaa592db69e4225172354b5ee3b1fd631a92e08a6c5ecf1269f7a8d1e0eb2792145f18668e676b4fbaf477a3f7cd36c6abc33aa246efabf8cfae35fbce5b232e50b8a4eb72b000f3c5472a67d25261f2da638a80270cbdb474e9b19b475a576ef6e995e96f1685cf94cc67364b8ace058a37fd412741449a5f5664da333f66b79fd3d994e4aa2f13a438ff1a2a463ee59d9d092bc11d15105e2d752d34c3a98da1ce42d911dd8a4690f6563c65ae3946f732c49d218a9acda6eb37aa9cfd707c3730f1a6420c648de9f0cf895d2a8684e52ac4c8dec605a40861314114fc49138b07e714f76b32587ba9b4f80a19f76d69b9aeef7f28c65605e8107e278c5a3ed7478a4e75a17e5af8eec3e6ace79d706ca25523c39e4518469a36f623640c3882daa4186cd67743c7a047509a99ab36f6c03a9f0cafc58534b54bbb701c3fa1a0c85d00719953f489be1f236ec4bf926a348f6518232fdb3d2b8b864ff225d2086ba0ed3aa79e12f2f3ac54264f355dbc4d222e3597181d1b48409c2b57d57d42f1c7608abc78708985937b4fede38f9e0b9e83b02f79e279a1b1ac07bd17f7ea99e342de48e7241c2267f6942c459b34b68c9ccc0c1b403b87f44207a7f9a97ae25d428a33653968e560f4c3f349198565fe57dec798e8dcdf7ee22f599cbbb939408cdee142c216735f3f37e5ce09da190a0927d049cd571d6db47696da11ca211e691e26752fc4dc327a8127b9169712adce11aac5643d4fccc96b13b0da54ddf8528855e67cf0f4e6d10f0a3b6aaf760c88c322d9b88fa6128002a6095edda20b3c013b59b8445bf0763634f4a04029ac0d696e2b5d79f283e03322082ce5287e894861a265927654efcf12889287a2869df64d6c947ef557b7ffe5572c1a68ff5cd140d38ea6b5bd4b1c5ada4b1bd2e34f7fdb9ccef9631fda1d4e9974cddd5aef9ca1ebc3b8d60f2c4227e4ca59fabcb05a776b1eeba6c5e379c9cdc67a646d312bd87573e5da0d546fde2a8f74f8748663f4e48ae6a583a3a79800de379fd0cda1654f2b4c11131dd183662322269570d5afeba4ac3c3b0ed532bab48fdf415834bd0ebce24a8974e905d652c05bf82c223c4 enter password...","link":"/2024/04/14/diary/2024/"},{"title":"SWS3004-Lecture 4: Cloud Software Development and Deployment","text":"L4 is about Cloud Software Development and Deployment. Outline Cloud Software Development Learning Objectives SaaS is Different from Traditional Software Different Perspectives of SaaS Development SaaS with Self-managed Infrastructure and Self-managed Platform SaaS with Self-managed Platform SaaS with Self-managed Infrastructure SaaS with Cloud-enabled IaaS and SaaS Summary Cloud Software Development Power of cloud computing – exploits higher service-level abstraction, PaaS and SaaS, to reduce the time and cost of software development SaaS changes the way software is delivered usage-based billing, high scalability, ease of access, automated updates PaaS changes the way the (SaaS) software is developed automates the process of deployment, testing and scaling to reduce manual work and cost of application development Learning Objectives Understand how SaaS applications are different from traditional software/application Understand the different perspectives of SaaS software development SaaS is Different from Traditional Software Pay-per-use - provides web access to commercial software on pay-as you-use vs traditional pay the full license fee Zero infrastructure – customers need not install the software (SaaS developed, deployed and managed by service provider) vs ASP (application service provider) owns and manages dedicated infrastructure for each customers Reduced business cost – 1-many - same SaaS application shared by multiple customers (multi-tenants) vs traditional 1-1 end-users and software relationship Automated updates – Updates performed by service providers (SaaS) not by users (traditional) Suitability of SaaS Not suitable Real-time processing where fast processing of data is needed Organization’s data is more confidential and data localization is needed When on-premise applications fulfil organization’s needs Suitable Consumers require on-demand software rather than full term/licensing-based software Start-up company that cannot invest in buying licensed software Applications with unpredictable and dynamic load Different Perspectives Of SaaS Development 2 key challenges choosing correct multitenancy level(s) - multitenancy can be achieved at different levels such as infrastructure, platform and application governance and security over user data four perspectives SaaS with Self-managed Infrastructure and Self-managed Platform SaaS with Self-managed Platform SaaS with Self-managed Infrastructure SaaS with Cloud-enabled IaaS and PaaS SaaS with Self-managed Infrastructure and Self-managed Platform SaaS with Self-managed Platform SaaS with Self-managed Infrastructure SaaS with Cloud-enabled IaaS and PaaS Summary cloud software development SaaS changes the way software is delivered SaaS is different from traditional software SaaS development: from self-managed to cloud enabled IaaS and/or PaaS cloud-enabled platform services (with advanced capabilities around artificial intelligence (AI), data analytics, blockchain, IoT, …) + server-less computing changes the development, deployment and cost of more complex software applications","link":"/2023/08/10/sws3004/lecture4/"},{"title":"SWS3004-Lecture 3: Big Data Architecture and Patterns","text":"L3 is about Big Data Architecture and Patterns. Overview Big Data and Big Data Architectures Platforms MapReduce, Hadoop, and HDFS Spark Cloud Dataflow and Beam Big Data and Big Data Architectures Big Data Big Data Architectures Big Data Platform and Applications Multicore/Cluster era → parallel and distributed applications Parallelism Task-parallel Data-parallel Batch (MapReduce, Spark, Cloud Dataflow) Stream (Spark Streaming, Flink, Cloud Dataflow) Mixed System resource demand Compute-intensive Data-intensive Mixed Platforms MapReduce, Hadoop, and HDFS MapReduce Programming Model Supports arbitrarily divisible workload Supports distributed computing on large data sets on multiple machines (clusters, public or private clouds, …) How large an amount of work? Web-scale data on the order of 100s of GBs to TBs or PBs Input data set will not likely fit on a single computer’s hard drive Distributed file system (e.g., Google File System- GFS) is typically required Inspired by the map and reduce functions in functional programming languages Key idea Split data into blocks and assign each block to an instance/process for parallel execution Merge partial results produced by individual instances after all instances completed execution Transform a set of input &lt;key, value&gt; pairs into a set of output &lt;key, value&gt; pairs SPMD (Same Program Multiple Data) - a master instance partitions the data and gathers the partial results Structure of a MapReduce Program Read (a lot of) data MAP (extract data you need from each record) Shuffle and Sort data REDUCE (aggregate, summarize, filter, transform extracted data) Write the results Hadoop Google MapReduce - closed source developed by Google (2004) to process large amounts of raw data Hadoop MapReduce – open source developed by Apache + Yahoo (Java programming language) – a popular implementation of MapReduce Presents MapReduce as an analytics engine with a distributed storage layer referred to as Hadoop Distributed File System (HDFS); HDFS mimics Google File System (GFS) Example: Amazon Elastic MapReduce creates a Hadoop cluster and handles data transfers between Amazon EC2 (computation) and Amazon S3 (storage) Spark Apache Spark Distributed processing framework and programming model for big data workloads Utilizes in-memory caching, and optimized query execution for fast analytic queries against data of any size It provides development APIs in Java, Scala, Python and R, and supports code reuse across multiple workloads: Batch processing Machine Learning Interactive queries Real-time analytics Spark RDD Main abstraction: resilient distributed dataset (RDD) - a collection of elements partitioned across the nodes of the cluster that can be operated on in parallel. RDD - created from the file system or through operations (transformations) Option to persist an RDD in memory or on disk to be reused efficiently across parallel operations RDD used for fault tolerance: recover from node failures Cloud Dataflow and Beam Google Cloud Dataflow “The Dataflow Model: A Practical Approach to Balancing Correctness, Latency, and Cost in Massive-Scale, Unbounded, Out-of-Order Data Processing\" reference Apache Beam Parallel computing framework for data processing Multiple SDKs (Java, Python, Go, Scala) Unified data model (PCollection): batch (bounded) streaming (unbounded) Pipelines containing data processing operations (PTransform) Source transforms Processing and Conversion transforms (Count, Sum, Map, GroupBy) Outputting Transforms Used defined transforms Run on multiple execution engines called Runners DirectRunner (Local) Google Dataflow Apache Spark Hadoop Apache Flink","link":"/2023/08/08/sws3004/lecture3/"},{"title":"SWS3004-Lecture 2: Applications and Paradigms","text":"L2 is about Application and Paradigms of Cloud Computing. Outline Cloud Applications Common Features Applications Challenges in Developing Applications Architectural Styles for Cloud Applications Cloud Application Development Models Characteristics of Cloud Service Models Examples of Setting up a Blog Key Terms Divisible workload Performance isolation Web application architecture layers Application development models (IaaS, PaaS, SaaS) Cloud Applications Common Features of Cloud Providers Basic and higher - level services (IaaS -&gt; SaaS). Compute and storage resources - virtual servers (Linux and Windows) and object store. Deployment management services - load balancer, auto scaling, message queueing, monitoring, …. User interface - graphical user interface, command-line interface. Cloud Applications Focus mainly on enterprise computing. Ideally, an application can partition its workload into n segments and spawn n instances, and the execution time reduced by a factor close to n. (MapReduce) Key Challenges cloud consumer: scale application to accommodate a dynamic load, recover after a system failure, efficiently support checkpoint/restart cloud provider: manage a large number of systems (cloud consumer applications), provides quality of service guarantee Ideal Applications web services database services search services machine learning with massive-scale models Unlikely to perform well applications with a complex workflow and multiple dependencies such as high-performance computing applications with intensive communication among concurrent instances workload cannot be arbitrarily partitioned Challenges in Developing Cloud Applications Performance isolation – how to ensure that customer performance is not affected by other users? Reliability - major concern, server failures expected when a large number of servers cooperate to compute. Cloud infrastructure exhibits latency and bandwidth fluctuations which affect the application performance. Performance considerations limit the amount of data logging (identify unexpected results, errors, monitor application performance). Architectural Styles for Cloud Applications Reliance on Internet and web technology (high accessibility, web browser universality, ease of web-based service development). Cloud services use web technology as both the implementation medium and management interface. 2 basic components of the web are web browser client and web server, i.e., based on client-server architecture. “as-a-Service” Cloud Delivery Models Simple Object Access Protocol (SOAP) : Application protocol for web applications; defines a common web service messaging format for request and response message exchanges; based on the XML, uses TCP or UDP transport protocols. Representational State Transfer (REST): software architecture for distributed hypermedia systems. Supports client communication with stateless servers, platform and language independent, supports data caching, and can be used in the presence of firewalls. Rest is better in simplicity, flexibility, efficiency and scalability, which is suitable for web applications. SOAP is suitable for applications requiring higher security, transaction handling, and reliability, particularly in enterprise-level applications. Cloud Application Development Models Characteristics of Cloud Service Models Infrastructure as a Service (for IT architects) Web access to resources Centralized physical resource management Elastic services and dynamic scaling Shared infrastructure across multiple users Preconfigured VMs Metered services Platform as a Service (for developers) All in one – same IDE to develop, test, deploy, host and maintain applications Web access to development platforms Offline access for developers Built-in scalability Collaborative platform for developers Diverse client tools Software as a Service (for end users) Multi-tenanted applications Web access Centralized management of SaaS services Multi-device support Scalability under varying loads High availability API integration with other software Examples of Setting up a Blog Bonus Track: Function as a Service","link":"/2023/08/03/sws3004/lecture2/"},{"title":"SWS3004-Lecture 1: Concepts and Models","text":"L1 is about Concepts and Models of Cloud Computing. Outline NIST Definition Cloud Characteristics Cloud Service(Delivery) Models Conceptual Reference Architecture Cloud Deployment Models Summary Key Terms Elasticity On-demand self service Pay-per-use (measured service) Multi-tenancy (location independent resource pooling) Cloud service (delivery) models Cloud deployment models Cloud actors Definition Cloud means \"smooth\" to access, control and measure. It has five essential characteristics, four deployment models and three service models. Cloud Characteristics On-demand self-service through a service portal With cloud computing, you can provision computing services, like server time and network storage, automatically. You won’t need to interact with the service provider. Cloud customers can access their cloud accounts through a web self-service portal to view their cloud services, monitor their usage, and provision and de-provision services. Broad network access (ubiquitous access) Users can access cloud services anytime and anywhere through a terminal device with network connection. Latency and bandwidth both count because they affect the quality of service. Location-independent resource pooling (multi-tenancy) Computing resources are gathered together as pools, like CPU pools, memory pools, etc. With resource pooling, multiple customers can share physical resources using a multi-tenancy model. This model allows customers to share the same applications or infrastructure while maintaining privacy and security. It's a fantastic characteristic of cloud, which abstracts and subdivides physical resources. Rapid elasticity – time to market / fast deployment Cloud services can be elastically provisioned and released, sometimes automatically, so customers can scale quickly based on demand. With rapid and unlimited elasticity of cloud service, you don't need to buy hardware but use cloud resources to satisfy your demand. Measured service (pay-per-use) In cloud systems, a metering capability optimizes resource usage at a level of abstraction appropriate to the type of service. For example, you can use a measured service for storage, processing, bandwidth, and users. Payment is based on actual consumption by the customer via a pay-for-what-you-use model. Monitoring, controlling, and reporting resource use creates a transparent experience for both consumers and providers of the service. Cloud Service(Delivery) Models There are three main models: SaaS, PaaS and IaaS. As for \"steak\" service, IaaS is like providing a kitchen with some pots, PaaS provides raw beef and pepper additionally, and SaaS provides a plate of steak. More convenience, but less space to select. Conceptual Reference Architecture Actor Roles Cloud Consumer - maintains a business relationship with, and uses service from Cloud Providers. Cloud Provider – offers a cloud service to cloud consumers. Cloud Auditor - conducts independent assessment of cloud services, system operations, performance and security of the cloud implementation. Cloud Broker - manages the use, performance and delivery of cloud services, and negotiates relationships between Cloud Providers and Cloud Consumers. Cloud Carrier - provides connectivity and transport of cloud services from Cloud Providers to Cloud Consumers. CLOUD DEPLOYMENT MODELS Private cloud solely for used by an organization for enterprises/corporations with large scale IT Public cloud available to general public, i.e., shared by all consumers open market for on demand computing and IT resources concerns: limited SLA, reliability, availability, security, trust Community cloud shared by several organizations and supporting a specific community Hybrid (federated) cloud two or more public and private clouds that interoperate extends private cloud(s) to include a shared public cloud","link":"/2023/07/28/sws3004/lecture1/"},{"title":"SWS3004-Lab Exercise 2","text":"This Lab is about Hadoop and Spark, using AWS EMR and S3. Exercise 2.1 Run and compare the execution time of WordCount on Wikipidia’s dump with both Hadoop MapReduce and Spark. You can use either IaaS or PaaS, but make sure you use the same type of setup for both Hadoop and Spark (e.g., if you use EMR for Hadoop MapReduce, then use EMR for Spark also). You have to use the provided input of size 12 GB. Is there any difference in the programming model and ease of programming? Is there any difference in performance? Please explain it in maximum 3 paragraphs. You can include up to 2 performance plots. Input dataset address on AWS S3: s3://sws3004-2023/input/enwiki-12GB.xml You must use this input dataset for both Hadoop MapReduce and Spark. (Tip: use the entire address s3://sws3004-2023/input/enwiki-12GB.xml as parameter to your MapReduce job) Part 1. Hadoop Mapreduce First I create a S3 bucket and upload files: Then I create an EMR cluster, select the S3 bucket created in the previous step as my S3 folder, and select m4.large and default 3 instances as the instance configuration. Now add a step, using WordCount.jar to process the input from s3://sws3004-2023/input/enwiki-12GB.xml. In my S3 bucket, I can check the output when the step finished. Hadoop MapReduce performance: The process takes 42 minutes totally. Part 2. Spark I clear the S3 bucket and upload the files of Spark: Then create a new EMR for Spark, and add a step. Spark performance: The process takes 16 minutes totally. It seems that Spark is better than Hadoop in performance. The reason is Hadoop uses disk to store data while Spark uses memory to store data, which can reduce the I/O time. Also, MapReduce requires a lot of time to sort during Shuffle, and sorting seems inevitable in MapReduce's Shuffle. When Spark is in Shuffle, sorting is only required for some situations, which is faster. Is there any difference in the programming model and ease of programming? Hadoop MapReduce: Hadoop MapReduce is a programming model designed for distributed data processing on large clusters of commodity hardware. The MapReduce programming model has two steps to process our data: Map and Reduce. Map: In the Map phase, the input data is divided into splits, and each split is processed independently by multiple mapper tasks in parallel. The mapper tasks extract key-value pairs from the input data and emit intermediate key-value pairs. Shuffle and Sort: The intermediate key-value pairs emitted by the mappers are shuffled and sorted based on the keys. This step ensures that all values for the same key are grouped together and sent to the same reducer task. Reduce: In the Reduce phase, the sorted and shuffled intermediate data is processed by reducer tasks. Each reducer task processes a subset of the intermediate data, grouped by keys. The reducer tasks aggregate the values associated with each key and produce the final output. Spark: Spark is a better distributed data processing engine, which extends the MapReduce model and offers more versatility and performance improvements. Spark introduces the concept of Resilient Distributed Datasets (RDDs), which are the fundamental data abstraction in Spark. RDDs are distributed collections of data that can be processed in parallel. Spark provides a more general programming model compared to Hadoop MapReduce. It supports not only Map and Reduce operations but also various other transformations and actions on RDDs, such as filter, join, groupByKey, reduceByKey and so on. Additionally, Spark offers specialized libraries like Spark SQL for structured data processing, Spark Streaming for real-time data streaming, and MLlib for machine learning tasks. Difference in Programming Model and Ease of Programming: I found a comparison form in Lecture slides: Programming Model: Hadoop MapReduce has a more rigid programming model, where data is processed in two distinct phases (Map and Reduce), and users need to explicitly handle intermediate data shuffle and sort. Spark provides a more flexible and expressive programming model with RDDs, allowing users to perform complex operations on distributed data through a wide range of transformations and actions. Ease of Programming: Spark generally offers better ease of programming due to its high-level APIs and expressive transformations and actions on RDDs. It simplifies the development of distributed data processing applications, and its concise syntax often leads to shorter and more readable code compared to Hadoop MapReduce. Hadoop MapReduce, being more low-level, might require developers to write additional code for tasks like intermediate data serialization and deserialization, which can make the development process more cumbersome. In summary, Spark provides a more powerful and user-friendly programming model compared to Hadoop MapReduce. Spark's RDDs and higher-level APIs make it easier for developers to write distributed data processing applications, leading to faster development cycles and more efficient data processing. Exercise 2.2 Write and run on AWS EMR a MapReduce program that computes the total number of followers and followees for each user in a Twitter dataset. The dataset is provided to you in the file twitter_combined.txt taken from http://snap.stanford.edu/data/egonets-Twitter.html. Each line of this file contains two user ids A and B meaning “User A follows User B”. For example, the first line is “214328887 34428380” and it means that “User 214328887 follows User 34428380”. My code is below: 123456789101112131415161718192021222324252627282930// here is the mappublic static class Map extends Mapper&lt;LongWritable, Text, Text, IntWritable&gt; { public void map(LongWritable key, Text texts, Context context) throws IOException, InterruptedException { String[] users = texts.toString().split(\" \"); // split as user0 user1 IntWritable followers = new IntWritable(-1); // negative IntWritable follows = new IntWritable(1); // positive context.write(new Text(users[1]), followers); context.write(new Text(users[0]), follows); }}// here is the reducepublic static class Reduce extends Reducer&lt;Text, IntWritable, Text, Text&gt; { public void reduce(Text texts, Iterable&lt;IntWritable&gt; values, Context context) throws IOException, InterruptedException { int follows = 0; int followers = 0; for (IntWritable text : texts) { if (text.get() &gt; 0) { follows += text.get(); } else { followers -= text.get(); } } // output the result for each user context.write(texts, new Text(String.format(\"Followers %d\", inDegree))); context.write(texts, new Text(String.format(\"Follows %d\", outDegree))); }} Then we create a S3 and upload the files: Now we can add a step in EMR and view the final output: So User 214328887 has 628 followers, and follows 951 users.","link":"/2023/07/28/sws3004/lab2/"},{"title":"SWS3004-Lab Exercise 1","text":"This Lab is based on Amazon Web Services(AWS)，including EC2, Lambda, SQS and CloudWatch. Exercise 1.1 Passwordless SSH access between two EC2 instances Create two (2) AWS EC2 instances (virtual machines) with a Linux-based operating system(e.g., Ubuntu) and set up passwordless SSH access among them. Let’s suppose we name those 2 instances A and B. Passwordless SSH means that we can SSH into instance A from instance B and vice versa without being asked for a password. How do you do that? Please explain it in 1-2 paragraphs. [3 marks] Firstly, I create two EC2 instances(serverA and serverB) with a Ubuntu-20.04 OS. The details are shown in Figure 1 and Figure 2 below. The IPv4 of serverA is 54.174.141.190, and the IPv4 of server B is 44.207.230.223. Let's start with password-less access from A to B. First, type the command ssh-keygen -t rsa in instance A. This command will generate a pair of public/private keys in the ~/.ssh/id_rsa.pub and ~/.ssh/id_rsa, shown in Figure 3. I met a trouble here: I use command ssh-copy-id -i ~/.ssh/id_rsa.pub ubuntu@44.207.230.223 to copy the public key of A to the authorized_keys of B, but it shows Permission denied. The reason for this error is this command will overwrite the file authorized_keys of B, but this file is already exists so this command was denied. Instead, I use cat ~/.ssh/id_rsa.pub in instance A to display my public key, and use echo \"MY_PUBLIC_KEY\" &gt;&gt; ~/.ssh/authorized_keys in instance B to paste the key. Now type ssh ubuntu@44.207.230.223 in instance A, we can access instance B successfully, without any password! View relevant screenshot in Figure 4. Symmetrically, to make instance B to access to A without any password, just generate ssh-key pair in instance B, and follow the steps above once again. In Figure 5, both A and B successfully access to each other, without password. Finally, I summarized the theory of password-less SSH in figure 6. Password-less SSH using a different port Similar to Exercise 1.1., create two (2) AWS EC2 instances (virtual machines) with a Linux based operating system (e.g., Ubuntu) and setup passwordless SSH access among them but this time use a different port for the SSH server (change the default port 22 to port 2222). Do you need to make any other modifications to your EC2 instances? [4 marks] Let's continue on the basis of Exercise 1.1. We have achieved password-less SSH access in the default port 22, and now we need to achieve it in port 2222. First, I edit the security groups of instance A and B, adding a new rule to allow 2222 port, just like Figure 7 below. Then I add Port 2222 in /etc/ssh/sshd_config, shown in Figure 8. However, I failed for the first time. How could be? The key is not to forget to restart the service. Type sudo service ssh restart to restart service, and then do password-less SSH access. In figure 9, Instance A and B can password-less access to each other using Port 2222. Exercise 1.2 Start: Hello World! Start by creating and running a Python AWS hello world using AWS Management Console, as shown during Lecture 2. Take screenshots of your Lambda function, test event and the log output to show that the program runs successfully. Pay attention to setting the role of the Lambda function to “LabRole”. [2 marks] I create and run a Python AWS hello world using AWS Management Console, the screenshots of lambda function, test event and the log output are shown in Figure 10/11/12. Create an AWS SQS Create an AWS Simple Queue Service (SQS) Queue and take a screenshot of the created queue. After creating the queue, note down its Amazon Resource Name (ARN). [2 marks] Here we create a AWS SQS Queue shown in Figure 13. The ARN is arn:aws:sqs:us-east-1:368136098362:Queue1 Change the code of Lambda Function Change the code of your Lambda function such that it returns the received message from SQS. You are allowed to search on the Internet for how to do that. Please include the code in your submission(report). Next, add the created queue (identified by its ARN) as trigger for the Lambda function. Take a screenshot of the “Function overview Info” section of your Lambda function. [2 marks] Now we need to change the code of the Lambda function such that it returns the received message from SQS. The code is shown in the block below. 12345678import jsonprint('Loading function')def lambda_handler(event, context): print('Received message: %s' % event['Records'][0]['body']) message = event['Records'][0]['body'] return message Then we need to add the created queue (identified by its ARN) as trigger for the Lambda function. There are two ways here: The first way is add the trigger in AWS Interface, shown in Figure 14. The second way is to use command line interface, shown in Figure 15. Two queues are successfully added as trigger, shown in Figure 16. The Function Overview is shown in Figure 17. Send and Receive Message In the SQS dashboard of your queue, click “Send and receive message”, then send a message with the body “Hello from SWS3004!”. Message Group ID and Message deduplication ID can be set to 0. Press “Send message”. Next, go to CloudWatch -&gt; Logs -&gt; Log groups and find the logs for your Lambda function. Click on the relevant log stream (e.g., the latest). There should be a message “Hello from SWS3004!” somewhere in this log stream. Take a screenshot and include it in the report. [2 marks] We send a message hello:-) from my SQS queue1, and finds the logs for my function hello, shown as Figure 18 and Figure 19.","link":"/2023/07/15/sws3004/lab1/"}],"tags":[{"name":"日记","slug":"日记","link":"/tags/%E6%97%A5%E8%AE%B0/"},{"name":"Cloud","slug":"Cloud","link":"/tags/Cloud/"},{"name":"Lab","slug":"Lab","link":"/tags/Lab/"}],"categories":[{"name":"采薇","slug":"采薇","link":"/categories/%E9%87%87%E8%96%87/"},{"name":"又日新","slug":"采薇/又日新","link":"/categories/%E9%87%87%E8%96%87/%E5%8F%88%E6%97%A5%E6%96%B0/"},{"name":"云开发","slug":"云开发","link":"/categories/%E4%BA%91%E5%BC%80%E5%8F%91/"}],"pages":[{"title":"","text":"关于本博客 见字如面 盗火：一些思考 逐日：知识学习 理水：工程实践 采薇：生活随感 关于我 北京邮电大学计算机学院本科，共产主义者 目前研究深度学习的后门攻击","link":"/about/index.html"},{"title":"categories","text":"","link":"/categories/index.html"},{"title":"","text":"采薇 相顾无相识 长歌怀采薇 又日新 2025/01 | 2024","link":"/life/index.html"},{"title":"","text":"理水","link":"/tech/index.html"},{"title":"","text":"逐日 世之奇伟、瑰怪、非常之观 常在于险远 而人之所罕至焉 故非有志者不能至也 云计算（Cloud Computing with Big Data) NUS 暑校课程，包括 4 个 Lecture 和 2 个 Lab Lecture Note Concepts and Models Applications and Paradigms Big Data Architecture and Patterns Cloud Software Development and Deployment Lab Report Lab Exercise 1 Lab Exercise 2","link":"/study/index.html"},{"title":"tags","text":"","link":"/tags/index.html"},{"title":"","text":"盗火","link":"/think/index.html"}]}