{"posts":[{"title":"虎符前端工程实践1","text":"深入 echarts 悬浮提示窗 Vue 页面设置切屏选项 深入 echarts 悬浮提示窗 在用 echarts 生成图表的时候，我们可以设置 tooltip 属性生成悬浮窗，通过鼠标悬浮展示当前位置的详细数据。例如，这段代码可以生成如下悬浮窗： 1234567tooltip: { trigger: 'axis', axisPointer: { type: 'cross' }, padding: [5, 10]}, trigger：触发类型。 'axis'： 指定触发提示窗的方式为在坐标轴上的轴线上触发，也就是当鼠标悬停在图表上的时候显示提示窗。 axisPointer：坐标轴指示器配置项，功能优先级低于轴上的 axisPointer。 type: 'cross'：指定提示窗的指示器类型为交叉指示器，交叉指示器会在X轴和Y轴上都显示一个十字准星，方便用户对鼠标所在位置的数据进行查看。 但简单生成的悬浮提示框往往没有单位，导致信息不够直观完善。我通过 tooltip 的 formatter 选项进行代码改进： 123456789101112131415161718192021222324252627tooltip: { trigger: 'axis', axisPointer: { type: 'cross' }, padding: [5, 10], formatter: function(params) { let tooltipContent = '' params.forEach(function(item) { const seriesName = item.seriesName const value = item.value let unit = '' // assign unit based on series name if (seriesName === 'CPU占用率' || seriesName === '内存占用率' || seriesName === '磁盘占用率') { unit = '%' } else if (seriesName === '网络流量流入' || seriesName === '网络流量流出') { unit = 'Mb/s' } // add unit to data tooltipContent += seriesName + ': ' + value + ' ' + unit + '&lt;br&gt;' }) return tooltipContent }}, Vue 页面设置切屏选项 12345678910111213141516&lt;template&gt; ... &lt;el-row type=\"flex\" justify=\"space-between\" class=\"row_spacing\"&gt; &lt;el-col :span=\"4\"&gt; &lt;el-radio-group v-model=\"radio\" @change=\"changeArea\"&gt; &lt;el-radio-button id=\"1\" :label=\"$t('config')\" /&gt; &lt;el-radio-button id=\"2\" :label=\"$t('status')\" /&gt; &lt;/el-radio-group&gt; &lt;/el-col&gt; &lt;el-col :span=\"20\" class=\"clearfix\"&gt; // 已经存在的其他按钮 &lt;/el-col&gt; &lt;/el-row&gt; ...&lt;/template&gt; 这里用到了 element-ui，el-col 默认分为 24 份，我给需要添加的两个按钮（配置和状态）分了 ”4“ 的空间。 v-model=\"radio\" 表示将 radio 变量与 &lt;el-radio-group&gt; 组件的选中状态进行双向绑定。当选中状态发生变化时，radio 变量的值也会相应更新 @change=\"changeArea\" 则是监听 &lt;el-radio-group&gt; 的 change 事件，并在事件触发时调用名为 changeArea 的方法 $t 是 Vue I18n 提供的一个函数，用于在 Vue 组件中获取翻译文本。通过 $t('config')，你可以获取名为 'config' 的翻译文本 接着我们在 method 区域实现 changeArea，总体思路是根据 radio 控制两个段落的显示 12345678910111213141516changeArea() { const config = document.getElementById('config') const status = document.getElementById('status') switch (this.radio) { case this.$t('config'): config.style.display = 'block' status.style.display = 'none' break case this.$t('status'): this.showStatus = 'true' config.style.display = 'none' status.style.display = 'block' break }}, 同时，我还希望点进页面的时候默认显示配置内容，那么只需要在 data 中加入 12345data() { return { radio: this.$t('config'), }}, Bug 问题一在于，初始的时候不会调用 changeArea，我很痛苦的发现两个段落同时工作了（现在发现不会出现，应该是个未定义的bug）。 方案一：我在 mounted 生命周期中调用 changeArea 函数，在组件被挂载之后调用函数显然可以修复这一问题。 问题二在于，采用方案一后状态对应的图表不再加载，除非我改变页面大小。这个问题很诡异，迫使我另辟蹊径去解决问题一。 修复 自始至终的问题在状态这一选项上，初始化时它作为不速之客蹦出来，改正后又姗姗不来。所以我在 data 中添加了 showStatus 这一参数并初始化为 false，并在状态段落添加 v-if=\"showStatus\" 属性。在 changeArea 触发 status 条件后才会置为 true。这样，就完美控制了状态段落的显示。","link":"/2023/06/06/%E8%99%8E%E7%AC%A6%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B51/"}],"tags":[{"name":"前端","slug":"前端","link":"/tags/%E5%89%8D%E7%AB%AF/"},{"name":"VUE","slug":"VUE","link":"/tags/VUE/"},{"name":"echarts","slug":"echarts","link":"/tags/echarts/"}],"categories":[{"name":"前端","slug":"前端","link":"/categories/%E5%89%8D%E7%AB%AF/"}],"pages":[{"title":"categories","text":"","link":"/categories/index.html"},{"title":"","text":"关于本博客 写作对我来说是一件爱恨交织的事情。我喜欢将自己的所思所感诉诸文字，却又往往囿于斟词酌句和重构文章结构中无法自拔。但我想这件事情总归是值得坚持的，它可以让我更加严肃的去审视、思考并总结，以安静的文字沉淀下来。这是我想要的生活方式吧，见字如面。 我的博客主要分为以下三个部分： 成于思：严肃思考 勤于学：知识学习 敏于行：工程实践 歌于途：生活随感 关于我 北京邮电大学计算机学院本科生 主要兴趣在全栈开发","link":"/about/index.html"},{"title":"life","text":"","link":"/life/index.html"},{"title":"tags","text":"","link":"/tags/index.html"},{"title":"","text":"敏于行：工程实践 虎符系列 “虎符”是徐鹏老师的云实验室项目，我忝列其中担任一些前端任务。 虎符前端工程实践1","link":"/tech/index.html"}]}